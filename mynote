brpc的futex：
需要系统调用去看有没有人竞争 释放时也需要系统调用去看看有没有人等 性能开销
但很多时候不存在竞争 这种情况下 不系统调用 
futex 位于用户态（自旋去CAS成功最好）若失败，有竞争，再用系统调用挂起进程
用户态需要维护一个等待队列：（便于释放时唤醒）
实际的类叫simufutex：内部有一个mutex和cond
Brpc源码中 有系统实现的futex和自己实现的futex

协程：结构体，要存寄存器的值（上下文），有指针指向自己的空间 yield resume
不是N:1是M（协程）:N（线程） 可以work-steal  可（协程）级别的挂起和唤醒

Butex实现了（协程）级别的挂起和唤醒：里面封了一个mutex或futex
里面的Mutex和futex是用来挂起线程，协程挂起在用户层实现的，加锁就是CAS并yield，没有走系统调用。相当于挂起就是从任务队列移出去，唤醒就是把这个协程加入任务队列。

